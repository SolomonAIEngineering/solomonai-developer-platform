# docker-compose.yml
version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: user_service_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_service
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d user_service"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Optional: Add pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    container_name: user_service_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app_network

  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: user_service_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: user_service
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Optional: Add Mongo Express for MongoDB management
  mongo-express:
    image: mongo-express
    container_name: user_service_mongo_express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: rootpassword
      ME_CONFIG_MONGODB_URL: mongodb://root:rootpassword@mongodb:27017/
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
    name: user_service_postgres_data
  mongodb_data:
    name: user_service_mongodb_data
